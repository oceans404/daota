export type Controller = import('./types').Controller;
export type ControllerOptions = import('./types').ControllerOptions;
export type ControllerOptionsOverrides = import('./types').ControllerOptionsOverrides;
export type Factory = import('./types').Factory;
/**
 * @typedef {import('./types').Controller} Controller
 * @typedef {import('./types').ControllerOptions} ControllerOptions
 * @typedef {import('./types').ControllerOptionsOverrides} ControllerOptionsOverrides
 * @typedef {import('./types').Factory} Factory
 */
/**
 * Creates a factory
 *
 * @param {ControllerOptions} [options]
 * @param {ControllerOptionsOverrides} [overrides]
 * @returns {Factory}
 */
export function createFactory(options?: import("./types").ControllerOptions | undefined, overrides?: import("./types").ControllerOptionsOverrides | undefined): Factory;
/**
 * Creates a node
 *
 * @param {ControllerOptions} [options]
 * @returns {Promise<Controller>}
 */
export function createController(options?: import("./types").ControllerOptions | undefined): Promise<Controller>;
/**
 * Create a Endpoint Server
 *
 * @param {number | { port: number }} [options] - Configuration options or just the port.
 * @param {ControllerOptions} [factoryOptions]
 * @param {ControllerOptionsOverrides} [factoryOverrides]
 */
export function createServer(options?: number | {
    port: number;
} | undefined, factoryOptions?: import("./types").ControllerOptions | undefined, factoryOverrides?: import("./types").ControllerOptionsOverrides | undefined): Server;
import Server = require("./endpoint/server");
//# sourceMappingURL=index.d.ts.map