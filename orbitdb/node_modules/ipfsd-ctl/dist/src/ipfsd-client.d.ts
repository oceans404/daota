export = Client;
/** @typedef {import("./index").ControllerOptions} ControllerOptions */
/**
 * Controller for remote nodes
 *
 * @class
 */
declare class Client {
    /**
     * @class
     * @param {string} baseUrl
     * @param {import('./types').RemoteState} remoteState
     * @param {ControllerOptions} options
     */
    constructor(baseUrl: string, remoteState: import('./types').RemoteState, options: ControllerOptions);
    opts: import("./types").ControllerOptions;
    baseUrl: string;
    id: string;
    path: string;
    initialized: boolean;
    started: boolean;
    disposable: boolean;
    clean: boolean;
    api: any;
    /** @type {import('./types').Subprocess | null} */
    subprocess: import('./types').Subprocess | null;
    /** @type {Multiaddr} */
    apiAddr: Multiaddr;
    /**
     * @private
     * @param {string} addr
     */
    private _setApi;
    /**
     * @private
     * @param {string} addr
     */
    private _setGateway;
    gatewayAddr: Multiaddr | undefined;
    /**
     * @private
     * @param {string} addr
     */
    private _setGrpc;
    grpcAddr: Multiaddr | undefined;
    /**
     * @private
     */
    private _createApi;
    /**
     * Initialize a repo.
     *
     * @param {import('./types').InitOptions} [initOptions]
     * @returns {Promise<Client>}
     */
    init(initOptions?: import("./types").InitOptions | undefined): Promise<Client>;
    /**
     * Delete the repo that was being used.
     * If the node was marked as `disposable` this will be called
     * automatically when the process is exited.
     *
     * @returns {Promise<Client>}
     */
    cleanup(): Promise<Client>;
    /**
     * Start the daemon.
     *
     * @returns {Promise<Client>}
     */
    start(): Promise<Client>;
    /**
     * Stop the daemon
     */
    stop(): Promise<this>;
    /**
     * Get the pid of the `ipfs daemon` process.
     *
     * @returns {Promise<number>}
     */
    pid(): Promise<number>;
    /**
     * Get the version of ipfs
     *
     * @returns {Promise<string>}
     */
    version(): Promise<string>;
}
declare namespace Client {
    export { ControllerOptions };
}
import { Multiaddr } from "multiaddr";
type ControllerOptions = import("./index").ControllerOptions;
//# sourceMappingURL=ipfsd-client.d.ts.map